<rml>
    <head>
        <style>
            body {
                font: 100% "宋体";
            }
            .warning-panel {
                pointer-events: none;
                background-color: rgb(44, 32, 18);
                border: 0.2vmin rgb(89, 73, 39);
                border-radius: 0.67vmin;
                margin:auto 0.3em;
                width: 35%;
                height: 11%;
                justify-content: space-evenly;
                flex-direction: row;
                animation: 3s cubic-out 0s slideup;
            }
            .warning-message {
                pointer-events: none;
                width: 95%;
                height: 100%;
                font-size: 4vmin;
                text-align: left;
                word-break: break-all;
            }
            .warning-icon {
                pointer-events: none;
                position: absolute;
                left: -1vmin;
                top:-3vmin;
                width: 2.8vmin;
                height: 7.6vmin;
                background-size: cover;
                background-image: "textures/common/exclamation2.texture";
            }
            .item-collect-panel {
                pointer-events: none;
                margin:auto 0.3em;
                flex-direction: column;
                justify-content: flex-start;
                align-items: center;
                animation: 4s cubic-out 0s slideup;
            }
            .item-teleport-send {
                pointer-events: none;
                animation: 1.6s cubic-in-out 0s teleport-send;
            }
            .item-teleport-recv {
                pointer-events: none;
                animation: 1.6s cubic-in-out 0s teleport-recv;
            }
            .materials {
                pointer-events: none;
                flex-direction: row;
                align-items: center;
                background-size: cover;
            }
            .materials-item {
                pointer-events: none;
                flex-direction: row;
                justify-content: flex-start;
                align-items: center;
            }
            .materials-icon {
                pointer-events: none;
                width: 4.67vmin;
                height: 4.67vmin;
                background-color: rgb(250, 205, 9);;
                flex-direction: row;
                justify-content: flex-start;
                align-items: center;
                background-size: cover;
                background-image: "textures/construct/chemistry1.texture";
            }
            .materials-name {
                pointer-events: none;
                padding-bottom: 0.3em;
                padding-left: 0.2em;
                padding-right:0.2em;
                font-size: 4.73vmin;
                text-align: center;
                -webkit-text-stroke: 0.15vmin #000;
            }
            .materials-num {
                pointer-events: none;
                padding-bottom: 0.3em;
                padding-right:1em;
                font-size: 4.73vmin;
                text-align: left;
                color: rgb(79, 250, 0);
                -webkit-text-stroke: 0.15vmin #000;
            }
            @keyframes slideup {
                0% {
                     top: 0px; 
                     opacity: 1;
                }
                50% {
                     top: -200px; 
                     opacity: 1;
                }
                100% { 
                    top: -200px; 
                    opacity: 0;
                }
            }
            @keyframes enlarge {
                0% {
                    font-size: 2vmin;
                    opacity: 1;
                }
                20% {
                    font-size: 10vmin;
                    opacity: 1;
                }
                70% {
                    font-size: 10vmin;
                    opacity: 1;
                }
                100% {
                    font-size: 2vmin;
                    opacity: 0;
                }
            }
            @keyframes teleport-send {
                0% {
                    left: 20vmin;
                    top: 65vmin;
                    opacity: 1;
                }
                95% {
                    left: 80vmin;
                    top: 5vmin;
                    opacity: 1;
                }
                100% {
                    left: 80vmin;
                    top: 5vmin;
                    opacity: 0;
                }
            }
            @keyframes teleport-recv {
                0% {
                    left: 80vmin;
                    top: 5vmin;
                    opacity: 1;
                }
                95% {
                    left: 20vmin;
                    top: 65vmin;
                    opacity: 1;
                }
                100% {
                    left: 20vmin;
                    top: 65vmin;
                    opacity: 0;
                }
            }
        </style>
        <style path = "common/building_style.rcss"/>
        <style path = "common/listpage_style.rcss"/>
        <script type="text/x-lua" >
            local ui_sys = require "ui_system"
            local start = ui_sys.createDataMode("start", {
                left = "0vmin",
                top = "0vmin",
            })
            ui_sys.addEventListener({
                ["message"] = function(...)
                    local message = ...
                    local parent = document.getElementById('pop_root')
                    local child = document.createElement "div"
                    --child.style.animation = '0.3s linear 0s enlarge'
                    child.outerHTML = ([[
                        <div class="warning-panel">
                            <div class="warning-icon"/>
                            <div class="warning-message">%s</div>
                        </div>
                    ]]):format(message)
                    --child.addEventListener('animationend', function(event) parent.removeChild(event.target) end)
                    parent.appendChild(child)
                end,
                ["item"] = function(...)
                    local parent = document.getElementById('pop_root')
                    local child = document.createElement "div"
                    child.className = "item-collect-panel"
                    local param = ...
                    console.log("----item----", param.left, param.top)
                    child.style.left = param.left
                    child.style.top = param.top
                    for _, it in ipairs(param.items) do
                        local item = document.createElement "div"
                        item.outerHTML = ([[
                            <div class = "materials">
                                <div class = "materials-item">
                                    <div class = "materials-icon" backgroundImage: %s"/>
                                    <div class = "materials-name">%s</div>
                                </div>
                                <div class = "materials-num">X %d</div>
                            </div>
                        ]]):format(it.icon, it.name, it.count)
                        child.appendChild(item)
                    end
                    --child.addEventListener('animationend', function(event) parent.removeChild(event.target) end)
                    parent.appendChild(child)
                end,
                ["teleport-recv"] = function(...)
                    local parent = document.getElementById('pop_root')
                    local child = document.createElement "div"
                    child.outerHTML = ([[<div class="item-teleport-send" style="flex-direction:row; left: 20vmin; top:65vmin;"/>]])
                    for _, it in ipairs(param.items) do
                        local item = document.createElement "div"
                        item.outerHTML = ([[
                            <div class = "materials">
                                <div class = "materials-icon" backgroundImage: %s"/>
                            </div>
                        ]]):format(it.icon)
                        child.appendChild(item)
                    end
                    --child.addEventListener('animationend', function(event) parent.removeChild(event.target) end)
                    parent.appendChild(child)
                end,
            })
        </script>
    </head>
    <body style="pointer-events: none;">
        <div id = "pop_root" style="pointer-events: none; position: absolute; width:100%; height:100%; border: 4px rgb(73,255,39);" data-style-left="left" data-style-top="top" data-model="start">
            <!--
            <!-- 警告上漂框 -->
            <div class="warning-panel" data-if="show_id == 'message'">
                <div class="warning-icon"/>
                <div class="warning-message">{{message}}</div>
            </div>

            <!-- 物品获得上漂框 -->
            <div class="item-collect-panel" data-if="show_id == 'item'">
                <div class = "materials" data-for="items">
                    <div class = "materials-item">
                        <div class = "materials-icon" data-style-background-image="it.icon"/>
                        <div class = "materials-name">{{it.name}}</div>
                    </div>
                    <div class = "materials-num">X {{it.count}}</div>
                </div>
            </div>

            <!-- 传送上漂框 发送 -->
            <div class="item-teleport-send" style="flex-direction:row; left: 20vmin; top:65vmin;" data-if="show_id == 'teleport-send'">
                <div class = "materials" data-for="items">
                    <div class = "materials-icon" data-style-background-image="it.icon"/>
                </div>
            </div>
            
            <!-- 传送下漂框 接收 -->
            <div class="item-teleport-recv" style="flex-direction:row; left: 80vmin; top:5vmin;" data-if="show_id == 'teleport-recv'">
                <div class = "materials" data-for="items">
                    <div class = "materials-icon" data-style-background-image="it.icon"/>
                </div>
            </div>
            -->
        </div>
    </body>
</rml>