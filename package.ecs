import "@ant.general"
import "@ant.render"
import "@ant.animation"
import "@ant.sky"
import "@ant.camera"
import "@ant.asset"
import "@ant.collision"
import "@ant.scene"
import "@ant.objcontroller"
import "@ant.effekseer"
import "@ant.rmlui"
import "@ant.terrain"

system "init_system"
    .implement "world/init_system.lua"
    .require_policy "ant.general|name"
    .require_policy "ant.animation|animation_controller.birth"
    .require_policy "ant.animation|skinning"
    .require_policy "ant.render|light"
    .require_policy "ant.sky|skybox"
    .require_policy "ant.sky|procedural_sky"
    .require_policy "ant.scene|scene_object"
    .require_policy "ant.render|render"
    .require_policy "ant.render|simplerender"
    .require_policy "ant.render|render_queue"
    .require_policy "ant.terrain|shape_terrain"

    .require_system "vaststars|input_system"
    .require_system "vaststars|construct_system"
    .require_system "vaststars|pickup_mapping_system"
    .require_system "vaststars|drapdrop_system"

    .require_interface "ant.collision|icollider"
    .require_interface "ant.animation|ianimation"
    .require_interface "vaststars|icamera_controller"
    .method "init_world"

pipeline "init"
    .stage "init"
    .stage "post_init"

pipeline "exit"
    .stage "exit"

pipeline "pickup_mapping"
    .stage "after_pickup_mapping"

pipeline "update"
    .stage "timer"
    .stage "start_frame"
    .stage "data_changed"
    .stage  "widget"
    .pipeline "sky"
    .pipeline "scene"
    .pipeline "camera"
    .pipeline "collider"
    .pipeline "animation"
    .pipeline "render"
    .pipeline "select"
    .pipeline "pickup_mapping"
    .pipeline "ui"
    .stage "end_frame"
    .stage "final"

pipeline "ui"
    .stage "ui_start"
    .stage "ui_update"
    .stage "ui_end"

---
system "camera_controller_system"
    .implement "world/camera_controller_system.lua"
    .require_interface "ant.objcontroller|iobj_motion"
    .require_interface "ant.camera|icamera"
    .method "init_world"
    .method "data_changed"

interface "icamera_controller"
    .implement "world/camera_controller_system.lua"
    .method "attach"
    .method "camera"

---
system "input_system"
    .implement "world/input_system.lua"
    .method "data_changed"
    .method "init_world"

interface "iinput"
    .implement "world/input_system.lua"
    .method "screen_to_world"
    .method "get_mouse_world_position"

component "drapdrop"
    .type "lua"

policy "drapdrop"
    .component "drapdrop"

system "drapdrop_system"
    .implement "world/drapdrop_system.lua"
    .method "data_changed"

component "terrain"
    .type "lua"

policy "terrain"
    .component "terrain"

interface "iterrain"
    .implement "world/iterrain.lua"
    .method "create"
    .method "get_coord_by_position"
    .method "get_position_by_coord"
    .method "get_tile_centre_position"
    .method "get_tile_building_type"
    .method "set_tile_building_type"
    .method "can_construct"

component "building"
    .type "lua"

policy "building"
    .component "building"

system "ui_system"
    .implement "world/ui_system.lua"
    .method "data_changed"

interface "iui"
    .implement "world/ui_system.lua"
    .method "open"
    .method "close"
    .method "post"

component "construct_entity"
    .type "lua"

policy "construct_entity"
    .component "construct_entity"

system "construct_system"
    .implement "world/construct_system.lua"
    .method "data_changed"
    .method "after_pickup_mapping"

interface "iconstruct"
    .implement "world/construct_system.lua"
    .method "init"

system "pickup_mapping_system"
    .implement "world/pickup_mapping_system.lua"
    .method "after_pickup"

interface "ipickup_mapping"
    .implement "world/pickup_mapping_system.lua"
    .method "mapping"
    .method "unmapping"
    .method "get_entity"

component "prefab_binding_on_ready"
    .type "lua"
component "prefab_binding_on_message"
    .type "lua"

policy "prefab_binding"
    .component_opt "prefab_binding_on_ready"
    .component_opt "prefab_binding_on_message"

interface "iroad"
    .implement "world/iroad.lua"
    .method "reset"
    .method "construct"
    .method "get_road_type"

component "road_arrow"
    .type "lua"

policy "road_arrow"
    .component "road_arrow"

interface "iroad_arrow"
    .implement "world/iroad_arrow.lua"
    .method "create"
